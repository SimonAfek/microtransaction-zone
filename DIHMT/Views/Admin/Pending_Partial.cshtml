@using DIHMT.Models
@using DIHMT.Static

@model PendingDisplayModel

@using (Html.BeginForm())
{
    var ratings = GameHelpers.GetRatings();
    var spotlessRating = ratings.First(x => x.Id == (int)EnumTag.Spotless);
    var f2pRating = ratings.First(x => x.Id == (int)EnumTag.F2P);

    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <div class="page-title">Pending Submission</div>
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.GameId)

        <!-- FLAGS -->

        <div class="form-group row no-gutters">

            <div class="col-md-3">@Html.LabelFor(model => model.Flags, htmlAttributes: new { @class = "control-label-flags" })</div>

            <div class="col-md-9">
                <div class="form-check">
                <input type="checkbox" name="Flags" value="@((int)EnumTag.Spotless)" checked="@Model.RatingModel.IsSpotless" id="@($"submission-checkbox-{(int)EnumTag.Spotless}")" class="spotless-checkbox submission-checkbox" />
                <label for="@($"submission-checkbox-{(int) EnumTag.Spotless}")" data-toggle="popover" data-placement="left" data-trigger="hover focus" title="@spotlessRating.Name" data-content="@spotlessRating.ShortDescription">
                    <img class="game-flag-img" src="@spotlessRating.ImageUrl" />
                </label>
                    <label>&ensp;Spotless</label>
                </div>

                <div class="form-check">
                    <input type="checkbox" name="Flags" value="@((int)EnumTag.F2P)" checked="@Model.Flags.Contains((int)EnumTag.F2P)" id="@($"submission-checkbox-{(int)EnumTag.F2P}")" class="submission-checkbox" />
                    <label for="@($"submission-checkbox-{(int) EnumTag.F2P}")" data-toggle="popover" data-placement="left" data-trigger="hover focus" title="@f2pRating.Name" data-content="@f2pRating.ShortDescription">
                        <img class="game-flag-img" src="@f2pRating.ImageUrl" />
                    </label>
                    <label>&ensp;Free To Play</label>
                </div>

                @foreach (var v in ratings.Where(x => Model.RatingModel.MonetizationFlags.Contains(x.Id)))
                {
                    <div class="form-check hide-when-spotless">
                        <input type="checkbox" name="Flags" value="@v.Id" checked="@Model.Flags.Contains(v.Id)" id="@($"submission-checkbox-{v.Id}")" class="monetization-input submission-checkbox" disabled="@Model.RatingModel.IsSpotless" />
                        <label for="@($"submission-checkbox-{v.Id}")" data-toggle="popover" data-placement="left" data-trigger="hover focus" title="@v.Name" data-content="@v.ShortDescription">
                            <img class="game-flag-img" src="@v.ImageUrl" />
                        </label>
                        <label>&ensp;@v.Name</label>
                    </div>
                }
            </div>
        </div>

        <!-- BASICALLY... -->

        <div class="form-group row no-gutters">

            <div class="col-md-3">@Html.LabelFor(model => model.Basically, htmlAttributes: new { @class = "control-label col-lg-2" })</div>

            <div class="col-md-9 wide-input-box">
                <input type="text" name="Basically" value="@Model.Basically" class="form-control wide-input" maxlength="280" />
            </div>

        </div>

        <!-- DETAILED INFO -->

        <p>
            @Html.LabelFor(model => model.RatingExplanation, htmlAttributes: new { @class = "control-label col-lg-2" })
        </p>
        <p>
            <div class="col-md-9 wide-input-box">
                <textarea name="RatingExplanation" class="form-control wide-input" rows="10" cols="100" maxlength="4000">@Model.RatingExplanation</textarea>
                @Html.ValidationMessageFor(model => model.RatingExplanation, "", new { @class = "text-danger" })
            </div>
        </p>

        <!-- COMMENT -->

        <p>
            @Html.LabelFor(model => model.Comment, htmlAttributes: new { @class = "control-label col-lg-2" })
        </p>
        <p>
            <div class="col-md-9 wide-input-box">
                <textarea name="RatingExplanation" class="form-control wide-input" rows="10" cols="100" maxlength="1000">@Model.Comment</textarea>
                @Html.ValidationMessageFor(model => model.Comment, "", new { @class = "text-danger" })
            </div>
        </p>

        <p>
            @Html.LabelFor(model => model.Links, htmlAttributes: new { @class = "control-label col-lg-2" })
        </p>
        <p>
            <div class="input-fields-wrap">
                @if (Model.Links != null && Model.Links.Any())
                {
                    for (var i = 0; i < Model.Links.Count; i++)
                    {
                        if (i == 0)
                        {
                            <div class="wide-input-box d-inline-flex form-horizontal links-margin">
                                <input type="text" name="Links" class="form-control wide-input links-input" maxlength="500" value="@Model.Links[i]" />&emsp;<button href="#" class="add-field-element btn btn-primary">+</button>
                            </div>
                        }
                        else
                        {
                            <div class="wide-input-box d-inline-flex form-horizontal links-margin">
                                <input type="text" name="Links" class="form-control wide-input links-input" maxlength="500" value="@Model.Links[i]" />&emsp;<button href="#" class="remove_field btn btn-primary">-</button>
                            </div>
                        }
                    }
                }
                else
                {
                    <div class="wide-input-box d-inline-flex form-horizontal links-margin">
                        <input type="text" name="Links" class="form-control wide-input links-input" maxlength="500" />&emsp;<button href="#" class="add-field-element btn btn-primary">+</button>
                    </div>
                }
            </div>
        </p>

        <p>
            @Html.LabelFor(model => model.TimeOfSubmission, htmlAttributes: new { @class = "control-label" })
        </p>
        <p>
            @Html.EditorFor(model => model.TimeOfSubmission, new { htmlAttributes = new { @class = "form-control", disabled = "true" } })
            @Html.ValidationMessageFor(model => model.TimeOfSubmission, "", new { @class = "text-danger" })
        </p>

        <p>
            @Html.LabelFor(model => model.SubmitterIp, htmlAttributes: new { @class = "control-label" })
        </p>
        <p>
            @Html.EditorFor(model => model.SubmitterIp, new { htmlAttributes = new { @class = "form-control", disabled = "true" } })
            @Html.ValidationMessageFor(model => model.SubmitterIp, "", new { @class = "text-danger" })
        </p>

        <p>
            @Html.LabelFor(model => model.QuietUpdate, htmlAttributes: new { @class = "control-label" })
        </p>
        <p>
            <div class="form-check">
                <input type="checkbox" name="QuietUpdate" value="true" />
                <label>&ensp;Yes</label>
            </div>
        </p>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" name="SubmitAction" id="ApproveButton" value="Approve" class="btn btn-success" />
                <input type="submit" name="SubmitAction" id="RejectButton" value="Reject" class="btn btn-danger" />
            </div>
        </div>
    </div>
}

@using (Html.BeginForm("Block", "Admin"))
{
    @Html.AntiForgeryToken()
    <input type="hidden" name="BlockedIp" value="@Model.SubmitterIp" />
    <input type="hidden" name="PendingId" value="@Model.Id" />

    <div class="form-horizontal">
        <h3>Block submitter</h3>
        <div class="form-group">
            <p>
                <label class="control-label">Reason for block</label>
                <input type="text" class="wide-input form-control" name="Reason" />
            </p>
            <p>
                <div class="col-md-2">
                    <label class="control-label">Explicit block?</label>
                </div>
                <div class="col-md-10">
                    <input type="checkbox" name="Explicit" /> Check this box and the user will be made aware on timeout when they try to submit. Leave it blank and they won't. Permabans are always without notification.
                </div>
            </p>
            <input type="submit" name="BlockType" id="TimeOutButton" value="TimeOut" class="btn btn-warning" />
            <input type="submit" name="BlockType" id="PermabanButton" value="PERMABAN" class="btn btn-danger" />
        </div>
    </div>
}

@Html.ActionLink("Back to List", "Pending")

@Scripts.Render("~/bundles/pendingpartial")
